grammar Clarity;
r : module;
Letter : [a-zA-Z];
whitespace : (' ' | '\n')+;
Digit : [0-9]+;
integer : Digit+;
string : ('"' (whitespace | Letter | Digit)+ '"') | ('\'' (whitespace | Letter | Digit)+ '\'');
identifier : (Digit | Letter)+;
module : identifier whitespace identifier whitespace string whitespace '{' whitespace ((function whitespace) | (type whitespace) | (module whitespace))+ '}';
accessor : identifier ('[' (integer | string) ']')+;
call : identifier whitespace* '(' identifier whitespace* ':' whitespace* value whitespace* (',' whitespace* identifier whitespace* ':' whitespace* value whitespace*)+ ')';
value : (identifier | call | tupleInstance | structInstance) accessor*;
type : (tuple | struct)+;
tuple : identifier whitespace identifier whitespace string whitespace '(' whitespace* identifier whitespace* (',' whitespace* identifier whitespace*)+ ')';
tupleInstance : '(' whitespace* value whitespace* (',' whitespace* value whitespace*)+ ')';
struct : identifier whitespace identifier whitespace string whitespace '{' whitespace* identifier whitespace* ':' whitespace* identifier (',' whitespace* identifier whitespace* ':' whitespace* identifier whitespace*)+ '}';
structInstance : '{' whitespace* identifier whitespace* ':' whitespace* value (',' whitespace* identifier whitespace* ':' whitespace* value whitespace*)+ '}';
function : identifier whitespace identifier whitespace identifier whitespace string whitespace '(' identifier whitespace identifier whitespace* (',' whitespace* identifier whitespace identifier whitespace*)+ ')' whitespace* '{' whitespace* (assignment whitespace*)+ ret whitespace* '}';
assignment : identifier whitespace identifier whitespace* '<-' whitespace* value ';';
ret : 'return' whitespace value ';';
